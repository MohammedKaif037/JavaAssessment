import java.util.Scanner;

public class EmployeeSalaryCalculator {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Employee Salary Calculator");
        System.out.println("--------------------------");

        // Get employee details
        System.out.print("Enter employee name: ");
        String name = scanner.nextLine();

        System.out.print("Enter hourly rate ($): ");
        double hourlyRate = scanner.nextDouble();

        System.out.print("Enter hours worked this week: ");
        double hoursWorked = scanner.nextDouble();

        System.out.print("Enter number of weeks in the month (typically 4): ");
        int weeksInMonth = scanner.nextInt();

        // Calculate weekly pay
        double weeklyPay = calculateWeeklyPay(hourlyRate, hoursWorked);

        // Calculate monthly pay before taxes
        double monthlyGrossPay = weeklyPay * weeksInMonth;

        // Calculate taxes and net pay
        double taxAmount = monthlyGrossPay * 0.10;
        double monthlyNetPay = monthlyGrossPay - taxAmount;

        // Display results
        System.out.println("\nSalary Calculation for " + name);
        System.out.println("--------------------------------");
        System.out.printf("Hourly Rate: $%.2f%n", hourlyRate);
        System.out.printf("Hours Worked (weekly): %.2f%n", hoursWorked);
        System.out.printf("Regular Hours (weekly): %.2f%n", Math.min(hoursWorked, 40));
        System.out.printf("Overtime Hours (weekly): %.2f%n", Math.max(hoursWorked - 40, 0));
        System.out.printf("Weekly Pay: $%.2f%n", weeklyPay);
        System.out.printf("Monthly Gross Pay (%d weeks): $%.2f%n", weeksInMonth, monthlyGrossPay);
        System.out.printf("Tax Deduction (10%%): $%.2f%n", taxAmount);
        System.out.printf("Monthly Net Pay: $%.2f%n", monthlyNetPay);

        scanner.close();
    }

    /**
     * Calculates weekly pay with overtime consideration
     * @param hourlyRate the employee's hourly rate
     * @param hoursWorked total hours worked in the week
     * @return weekly pay amount
     */
    public static double calculateWeeklyPay(double hourlyRate, double hoursWorked) {
        double regularHours = Math.min(hoursWorked, 40);
        double overtimeHours = Math.max(hoursWorked - 40, 0);
        double overtimeRate = hourlyRate * 1.5;

        return (regularHours * hourlyRate) + (overtimeHours * overtimeRate);
    }
}



import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class OnlineFoodOrderingSystem {
    private static final double TAX_RATE = 0.08; // 8% tax
    private static final double DELIVERY_CHARGE = 5.00; // Flat $5 delivery fee

    private Map<Integer, FoodItem> menu;
    private List<OrderItem> cart;
    private String specialInstructions;

    public OnlineFoodOrderingSystem() {
        initializeMenu();
        cart = new ArrayList<>();
        specialInstructions = "";
    }

    private void initializeMenu() {
        menu = new HashMap<>();
        menu.put(1, new FoodItem("Burger", 8.99));
        menu.put(2, new FoodItem("Pizza", 12.99));
        menu.put(3, new FoodItem("Pasta", 10.99));
        menu.put(4, new FoodItem("Salad", 7.99));
        menu.put(5, new FoodItem("Soda", 1.99));
        menu.put(6, new FoodItem("Ice Cream", 4.99));
    }

    public void displayMenu() {
        System.out.println("\n=== MENU ===");
        System.out.println("ID\tItem\t\tPrice");
        System.out.println("----------------------------");
        for (Map.Entry<Integer, FoodItem> entry : menu.entrySet()) {
            System.out.printf("%d\t%-15s$%.2f%n",
                entry.getKey(),
                entry.getValue().getName(),
                entry.getValue().getPrice());
        }
        System.out.println("----------------------------");
    }

    public void addToCart(int itemId, int quantity) {
        if (menu.containsKey(itemId)) {
            FoodItem item = menu.get(itemId);
            cart.add(new OrderItem(item, quantity));
            System.out.printf("Added %d x %s to your cart.%n", quantity, item.getName());
        } else {
            System.out.println("Invalid item ID. Please try again.");
        }
    }

    public void displayCart() {
        if (cart.isEmpty()) {
            System.out.println("Your cart is empty.");
            return;
        }

        System.out.println("\n=== YOUR ORDER ===");
        System.out.println("Item\t\tQty\tPrice\tTotal");
        System.out.println("--------------------------------");

        for (OrderItem orderItem : cart) {
            FoodItem item = orderItem.getItem();
            double itemTotal = item.getPrice() * orderItem.getQuantity();
            System.out.printf("%-15s%d\t$%.2f\t$%.2f%n",
                item.getName(),
                orderItem.getQuantity(),
                item.getPrice(),
                itemTotal);
        }

        System.out.println("--------------------------------");

        if (!specialInstructions.isEmpty()) {
            System.out.println("Special Instructions: " + specialInstructions);
        }

        double subtotal = calculateSubtotal();
        double tax = subtotal * TAX_RATE;
        double total = subtotal + tax + DELIVERY_CHARGE;

        System.out.printf("Subtotal: $%.2f%n", subtotal);
        System.out.printf("Tax (%.0f%%): $%.2f%n", TAX_RATE * 100, tax);
        System.out.printf("Delivery Fee: $%.2f%n", DELIVERY_CHARGE);
        System.out.printf("TOTAL: $%.2f%n", total);
    }

    private double calculateSubtotal() {
        return cart.stream()
                .mapToDouble(item -> item.getItem().getPrice() * item.getQuantity())
                .sum();
    }

    public void setSpecialInstructions(String instructions) {
        this.specialInstructions = instructions;
    }

    public static void main(String[] args) {
        OnlineFoodOrderingSystem system = new OnlineFoodOrderingSystem();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to the Online Food Ordering System!");

        boolean ordering = true;
        while (ordering) {
            System.out.println("\nWhat would you like to do?");
            System.out.println("1. View Menu");
            System.out.println("2. Add Item to Cart");
            System.out.println("3. View Cart");
            System.out.println("4. Add Special Instructions");
            System.out.println("5. Checkout");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    system.displayMenu();
                    break;
                case 2:
                    system.displayMenu();
                    System.out.print("Enter item ID to add: ");
                    int itemId = scanner.nextInt();
                    System.out.print("Enter quantity: ");
                    int quantity = scanner.nextInt();
                    system.addToCart(itemId, quantity);
                    break;
                case 3:
                    system.displayCart();
                    break;
                case 4:
                    System.out.print("Enter special instructions: ");
                    String instructions = scanner.nextLine();
                    system.setSpecialInstructions(instructions);
                    System.out.println("Special instructions added.");
                    break;
                case 5:
                    if (system.cart.isEmpty()) {
                        System.out.println("Your cart is empty. Please add items before checkout.");
                    } else {
                        system.displayCart();
                        System.out.println("\nThank you for your order!");
                        System.out.println("Your food will be delivered soon.");
                        ordering = false;
                    }
                    break;
                case 6:
                    System.out.println("Goodbye!");
                    ordering = false;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }
}

class FoodItem {
    private String name;
    private double price;

    public FoodItem(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

class OrderItem {
    private FoodItem item;
    private int quantity;

    public OrderItem(FoodItem item, int quantity) {
        this.item = item;
        this.quantity = quantity;
    }

    public FoodItem getItem() {
        return item;
    }

    public int getQuantity() {
        return quantity;
    }
}